{
  "recommendations": ["astro-build.astro-vscode", "vitest.explorer"],
  "unwantedRecommendations": []
}
import streamlit as st
import pandas as pd
from io import BytesIO
import plotly.express as px

st.set_page_config(page_title="Facturation Garantie Renault", layout="wide")
st.title("ðŸš— Optimisation Facturation Garantie Renault - WebApp Mobile")

# --- INITIALISATION DES DONNÃ‰ES ---
if "df_interventions" not in st.session_state:
    st.session_state.df_interventions = pd.DataFrame(columns=[
        "Date", "Immatriculation", "Client", "Marque/ModÃ¨le", "Type dâ€™intervention",
        "Code dÃ©faut / DTC", "Temps rÃ©el passÃ© (h)", "Temps barÃ¨me Renault (h)",
        "PiÃ¨ces remboursables (â‚¬)", "Main-dâ€™Å“uvre remboursable (â‚¬)", "Total facturable (â‚¬)",
        "Statut demande", "Observations"
    ])

# --- BARÃˆME RENAULT ---
bareme = {
    "Diagnostic Ã©lectronique": {"durÃ©e": 1.5, "taux": 55},
    "Remplacement piÃ¨ce simple": {"durÃ©e": 0.5, "taux": 55},
    "Remplacement piÃ¨ce complexe": {"durÃ©e": 2.0, "taux": 55},
    "RÃ©vision gÃ©nÃ©rale": {"durÃ©e": 3.0, "taux": 55}
}

# --- FORMULAIRE D'INTERVENTION ---
st.header("Ajouter une intervention")
with st.form("intervention_form"):
    date = st.date_input("Date de l'intervention")
    immatriculation = st.text_input("Immatriculation")
    client = st.text_input("Nom du client")
    marque_modele = st.text_input("Marque / ModÃ¨le")
    type_interv = st.selectbox("Type dâ€™intervention", list(bareme.keys()))
    dtc = st.text_input("Code dÃ©faut / DTC")
    temps_reel = st.number_input("Temps rÃ©el passÃ© (h)", min_value=0.0)
    pieces = st.number_input("PiÃ¨ces remboursables (â‚¬)", min_value=0.0)
    main_oeuvre = bareme[type_interv]["durÃ©e"] * bareme[type_interv]["taux"]
    statut = st.selectbox("Statut demande", ["AcceptÃ©", "RefusÃ©"])
    observations = st.text_area("Observations")
    submitted = st.form_submit_button("Ajouter l'intervention")

    if submitted:
        new_data = {
            "Date": date,
            "Immatriculation": immatriculation,
            "Client": client,
            "Marque/ModÃ¨le": marque_modele,
            "Type dâ€™intervention": type_interv,
            "Code dÃ©faut / DTC": dtc,
            "Temps rÃ©el passÃ© (h)": temps_reel,
            "Temps barÃ¨me Renault (h)": bareme[type_interv]["durÃ©e"],
            "PiÃ¨ces remboursables (â‚¬)": pieces,
            "Main-dâ€™Å“uvre remboursable (â‚¬)": main_oeuvre,
            "Total facturable (â‚¬)": pieces + main_oeuvre,
            "Statut demande": statut,
            "Observations": observations
        }
        st.session_state.df_interventions = pd.concat(
            [st.session_state.df_interventions, pd.DataFrame([new_data])], ignore_index=True
        )
        st.success("Intervention ajoutÃ©e !")

# --- TABLEAU DES INTERVENTIONS ---
if not st.session_state.df_interventions.empty:
    st.subheader("ðŸ“‹ Liste des interventions")
    st.dataframe(st.session_state.df_interventions)

    # --- KPI PAR MOIS ---
    st.subheader("ðŸ“Š KPI par mois")
    df = st.session_state.df_interventions.copy()
    df["Mois"] = pd.to_datetime(df["Date"]).dt.to_period("M")
    kpi = df.groupby("Mois").apply(lambda x: pd.Series({
        "Total interventions": len(x),
        "Total acceptÃ© (â‚¬)": x.loc[x["Statut demande"]=="AcceptÃ©","Total facturable (â‚¬)"].sum(),
        "Total refusÃ© (â‚¬)": x.loc[x["Statut demande"]=="RefusÃ©","Total facturable (â‚¬)"].sum(),
        "Taux succÃ¨s (%)": (len(x[x["Statut demande"]=="AcceptÃ©"]) / len(x)*100) if len(x) > 0 else 0
    })).reset_index()
    st.dataframe(kpi)

    # --- GRAPHIQUES ---
    st.subheader("ðŸ“ˆ Visualisation KPI")
    fig = px.bar(kpi, x="Mois", y=["Total interventions", "Total acceptÃ© (â‚¬)", "Total refusÃ© (â‚¬)"],
                 barmode="group", title="KPI Interventions par Mois")
    st.plotly_chart(fig, use_container_width=True)

    # --- EXPORT EXCEL ---
    st.subheader("ðŸ’¾ Exporter les donnÃ©es")
    buffer = BytesIO()
    with pd.ExcelWriter(buffer, engine="xlsxwriter") as writer:
        st.session_state.df_interventions.to_excel(writer, sheet_name="Interventions", index=False)
        kpi.to_excel(writer, sheet_name="Analyse KPI", index=False)
    st.download_button("TÃ©lÃ©charger Excel", data=buffer.getvalue(),
                       file_name="Facturation_Garantie_Renault.xlsx")